package com.fis.esme.isdnspecial;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 2.4.1 2014-02-26T15:10:58.161+07:00
 * Generated source version: 2.4.1
 * 
 */
@WebService(targetNamespace = "http://isdnspecial.esme.fis.com/", name = "IsdnSpecialTransferer")
@XmlSeeAlso({ ObjectFactory.class })
public interface IsdnSpecialTransferer {

	@WebResult(name = "return", targetNamespace = "")
	@RequestWrapper(localName = "findAllWithParameter", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.FindAllWithParameter")
	@WebMethod
	@ResponseWrapper(localName = "findAllWithParameterResponse", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.FindAllWithParameterResponse")
	public java.util.List<com.fis.esme.persistence.EsmeIsdnSpecial> findAllWithParameter(
			@WebParam(name = "arg0", targetNamespace = "") com.fis.esme.persistence.SearchEntity arg0,
			@WebParam(name = "arg1", targetNamespace = "") com.fis.esme.persistence.EsmeIsdnSpecial arg1)
			throws Exception_Exception;

	@RequestWrapper(localName = "update", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.Update")
	@WebMethod
	@ResponseWrapper(localName = "updateResponse", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.UpdateResponse")
	public void update(
			@WebParam(name = "arg0", targetNamespace = "") com.fis.esme.persistence.EsmeIsdnSpecial arg0)
			throws Exception_Exception;

	@WebResult(name = "return", targetNamespace = "")
	@RequestWrapper(localName = "findAllWithOrderPaging", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.FindAllWithOrderPaging")
	@WebMethod
	@ResponseWrapper(localName = "findAllWithOrderPagingResponse", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.FindAllWithOrderPagingResponse")
	public java.util.List<com.fis.esme.persistence.EsmeIsdnSpecial> findAllWithOrderPaging(
			@WebParam(name = "arg0", targetNamespace = "") com.fis.esme.persistence.SearchEntity arg0,
			@WebParam(name = "arg1", targetNamespace = "") com.fis.esme.persistence.EsmeIsdnSpecial arg1,
			@WebParam(name = "arg2", targetNamespace = "") java.lang.String arg2,
			@WebParam(name = "arg3", targetNamespace = "") boolean arg3,
			@WebParam(name = "arg4", targetNamespace = "") int arg4,
			@WebParam(name = "arg5", targetNamespace = "") int arg5,
			@WebParam(name = "arg6", targetNamespace = "") boolean arg6)
			throws Exception_Exception;

	@WebResult(name = "return", targetNamespace = "")
	@RequestWrapper(localName = "checkExisted", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.CheckExisted")
	@WebMethod
	@ResponseWrapper(localName = "checkExistedResponse", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.CheckExistedResponse")
	public int checkExisted(
			@WebParam(name = "arg0", targetNamespace = "") com.fis.esme.persistence.SearchEntity arg0,
			@WebParam(name = "arg1", targetNamespace = "") com.fis.esme.persistence.EsmeIsdnSpecial arg1);

	@WebResult(name = "return", targetNamespace = "")
	@RequestWrapper(localName = "count", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.Count")
	@WebMethod
	@ResponseWrapper(localName = "countResponse", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.CountResponse")
	public int count(
			@WebParam(name = "arg0", targetNamespace = "") com.fis.esme.persistence.EsmeIsdnSpecial arg0,
			@WebParam(name = "arg1", targetNamespace = "") boolean arg1);

	@WebResult(name = "return", targetNamespace = "")
	@RequestWrapper(localName = "getPermissionByMisdn", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.GetPermissionByMisdn")
	@WebMethod
	@ResponseWrapper(localName = "getPermissionByMisdnResponse", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.GetPermissionByMisdnResponse")
	public java.util.List<com.fis.esme.persistence.EsmeIsdnPermission> getPermissionByMisdn(
			@WebParam(name = "arg0", targetNamespace = "") java.lang.String arg0)
			throws Exception_Exception;

	@WebResult(name = "return", targetNamespace = "")
	@RequestWrapper(localName = "countAll", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.CountAll")
	@WebMethod
	@ResponseWrapper(localName = "countAllResponse", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.CountAllResponse")
	public int countAll();

	@RequestWrapper(localName = "deletePermissionByMsisdn", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.DeletePermissionByMsisdn")
	@WebMethod
	@ResponseWrapper(localName = "deletePermissionByMsisdnResponse", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.DeletePermissionByMsisdnResponse")
	public void deletePermissionByMsisdn(
			@WebParam(name = "arg0", targetNamespace = "") java.lang.String arg0)
			throws Exception_Exception;

	@RequestWrapper(localName = "delete", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.Delete")
	@WebMethod
	@ResponseWrapper(localName = "deleteResponse", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.DeleteResponse")
	public void delete(
			@WebParam(name = "arg0", targetNamespace = "") com.fis.esme.persistence.EsmeIsdnSpecial arg0)
			throws Exception_Exception;

	@WebResult(name = "return", targetNamespace = "")
	@RequestWrapper(localName = "checkConstraints", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.CheckConstraints")
	@WebMethod
	@ResponseWrapper(localName = "checkConstraintsResponse", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.CheckConstraintsResponse")
	public boolean checkConstraints(
			@WebParam(name = "arg0", targetNamespace = "") java.lang.String arg0);

	@WebResult(name = "return", targetNamespace = "")
	@RequestWrapper(localName = "findAllWithoutParameter", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.FindAllWithoutParameter")
	@WebMethod
	@ResponseWrapper(localName = "findAllWithoutParameterResponse", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.FindAllWithoutParameterResponse")
	public java.util.List<com.fis.esme.persistence.EsmeIsdnSpecial> findAllWithoutParameter()
			throws Exception_Exception;

	@RequestWrapper(localName = "updateSpecial", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.UpdateSpecial")
	@WebMethod
	@ResponseWrapper(localName = "updateSpecialResponse", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.UpdateSpecialResponse")
	public void updateSpecial(
			@WebParam(name = "arg0", targetNamespace = "") com.fis.esme.persistence.EsmeIsdnSpecial arg0,
			@WebParam(name = "arg1", targetNamespace = "") java.lang.String arg1)
			throws Exception_Exception;

	@WebResult(name = "return", targetNamespace = "")
	@RequestWrapper(localName = "add", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.Add")
	@WebMethod
	@ResponseWrapper(localName = "addResponse", targetNamespace = "http://isdnspecial.esme.fis.com/", className = "com.fis.esme.isdnspecial.AddResponse")
	public java.lang.String add(
			@WebParam(name = "arg0", targetNamespace = "") com.fis.esme.persistence.EsmeIsdnSpecial arg0)
			throws Exception_Exception;
}
